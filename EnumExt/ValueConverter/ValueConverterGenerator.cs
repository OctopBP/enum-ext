using System.Collections.Generic;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using SourceGeneration.Utils.CodeAnalysisExtensions;
using SourceGeneration.Utils.CodeBuilder;
using SourceGeneration.Utils.Common;

namespace EnumExt.ValueConverter;

[Generator]
public sealed class ValueConverterGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var enums = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (node, _) => IsSyntaxTargetForGeneration(node),
                transform: static (syntaxContext, token) => GetSemanticTargetForGeneration(syntaxContext, token))
            .SelectMany(static (array, _) => array)
            .Collect()
            .SelectMany(static (array, _) => array);

        context.RegisterPostInitializationOutput(i => i.AddSource(
            $"{ValueConverterAttribute.AttributeFullName}.g", ValueConverterAttribute.AttributeText));
        
        context.RegisterSourceOutput(enums, GenerateCode);
    }

    private static bool IsSyntaxTargetForGeneration(SyntaxNode node)
    {
        return node is EnumDeclarationSyntax;
    }
    
    private static List<EnumToProcess> GetSemanticTargetForGeneration(GeneratorSyntaxContext ctx,
        CancellationToken token)
    {
        var enumDeclarationSyntax = (EnumDeclarationSyntax) ctx.Node;

        var enumDeclarationSymbol = ctx.SemanticModel.GetDeclaredSymbol(enumDeclarationSyntax, token);
        if (enumDeclarationSymbol is not ITypeSymbol enumDeclarationTypeSymbol)
        {
            return [];
        }

        var enumNamespace = enumDeclarationTypeSymbol.GetNamespace();

        if (!enumDeclarationSyntax.HaveAttributeWithArguments(ValueConverterAttribute.AttributeName, out var argumentList))
        {
            return [];
        }
        
        if (argumentList.Arguments.Count < 1)
        {
            return [];
        }
        
        var conversionStrategyArgument = argumentList.Arguments[0];
        if (conversionStrategyArgument.Expression is not MemberAccessExpressionSyntax conversionStrategySyntax)
        {
            return [];
        }
        var conversionStrategy = conversionStrategySyntax.Name.Identifier.Text;

        
        var list = new List<EnumToProcess>
        {
            new EnumToProcess(enumDeclarationTypeSymbol, enumNamespace, conversionStrategy)
        };

        return list;
    }

    private static void GenerateCode(SourceProductionContext context, EnumToProcess enumToProcess)
    {
        var code = GenerateCode(enumToProcess);
        context.AddSource($"{enumToProcess.EnumSymbol.ToDisplayString()}_ValueConverter{enumToProcess.ConversionStrategy}.g",
            SourceText.From(code, Encoding.UTF8));
    }

    private static string GenerateCode(EnumToProcess enumToProcess)
    {
        var builder = new CodeBuilder();
        
        var isVisible = enumToProcess.EnumSymbol.IsVisibleOutsideOfAssembly();
        var methodVisibility = isVisible ? "public" : "internal";
        var enumName = enumToProcess.EnumSymbol.Name;
        var enumFullName = enumToProcess.FullCsharpName;
        
        builder.Append(Utils.AutoGenerated());
        
        builder.AppendLineWithIdent("using Microsoft.EntityFrameworkCore.Storage.ValueConversion;");
        builder.AppendLine();
        
        using (new NamespaceBlock(builder, enumToProcess.EnumSymbol))
        {
            builder.Append(Utils.GeneratedEnumByAttributeSummary(ValueConverterAttribute.AttributeFullName, enumFullName));
            builder.AppendIdent().Append(methodVisibility).Append(" class ").Append(enumName)
                .Append("ValueConverter").Append(enumToProcess.ConversionStrategy)
                .Append("() : ValueConverter<").Append(enumFullName)
                .Append(", string>(v => ")
                .Append(enumToProcess.ConversionStrategy switch
                {
                    "Name" => "v.Name()",
                    "SnakeCase" => "v.SnakeCaseName()",
                    "Value" => "v.Value()",
                    _ => "",
                })
                .Append(", v => ")
                .Append(enumName).Append("Ext.")
                .Append(enumToProcess.ConversionStrategy switch
                {
                    "Name" => "FromString",
                    "SnakeCase" => "FromSnakeCaseString",
                    "Value" => "FromStringValue",
                    _ => "",
                })
                .Append("(v));").AppendLine();
        }

        return builder.ToString();
    }
}