using System.Collections.Generic;
using System.Text;
using System.Threading;
using EnumExt.EnumExtensions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using SourceGeneration.Utils.CodeAnalysisExtensions;
using SourceGeneration.Utils.CodeBuilder;
using SourceGeneration.Utils.Common;

namespace EnumExt.JsonArrayConverter;

[Generator]
public sealed class JsonArrayConverterGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var enums = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (node, _) => IsSyntaxTargetForGeneration(node),
                transform: static (syntaxContext, token) => GetSemanticTargetForGeneration(syntaxContext, token))
            .SelectMany(static (array, _) => array)
            .Collect()
            .SelectMany(static (array, _) => array);

        context.RegisterPostInitializationOutput(i => i.AddSource(
            $"{JsonArrayConverterAttribute.AttributeFullName}.g", JsonArrayConverterAttribute.AttributeText));
        
        context.RegisterSourceOutput(enums, GenerateCode);
    }

    private static bool IsSyntaxTargetForGeneration(SyntaxNode node)
    {
        return node is EnumDeclarationSyntax;
    }
    
    private static List<EnumToProcess> GetSemanticTargetForGeneration(GeneratorSyntaxContext ctx,
        CancellationToken token)
    {
        var enumDeclarationSyntax = (EnumDeclarationSyntax) ctx.Node;

        var enumDeclarationSymbol = ctx.SemanticModel.GetDeclaredSymbol(enumDeclarationSyntax, token);
        if (enumDeclarationSymbol is not ITypeSymbol enumDeclarationTypeSymbol)
        {
            return [];
        }

        var enumNamespace = enumDeclarationTypeSymbol.GetNamespace();
        
        if (!enumDeclarationSyntax.HaveAttributeWithArguments(JsonArrayConverterAttribute.AttributeName, out var argumentList))
        {
            return [];
        }

        if (argumentList.Arguments.Count < 2)
        {
            return [];
        }
        
        var jsonTypeArgument = argumentList.Arguments[0];
        if (jsonTypeArgument.Expression is not MemberAccessExpressionSyntax jsonTypeSyntax)
        {
            return [];
        }
        var jsonType = jsonTypeSyntax.Name.Identifier.Text;
        
        var conversionStrategyArgument = argumentList.Arguments[1];
        if (conversionStrategyArgument.Expression is not MemberAccessExpressionSyntax conversionStrategySyntax)
        {
            return [];
        }
        var conversionStrategy = conversionStrategySyntax.Name.Identifier.Text;
        
        var list = new List<EnumToProcess>
        {
            new EnumToProcess(enumDeclarationTypeSymbol, enumNamespace, jsonType, conversionStrategy),
        };

        return list;
    }

    private static void GenerateCode(SourceProductionContext context, EnumToProcess enumToProcess)
    {
        var code = enumToProcess.JsonType switch
        {
            "SystemTextJson" => GenerateCodeFor_SystemTextJson(enumToProcess),
            "NewtonsoftJson" => GenerateCodeFor_NewtonsoftJson(enumToProcess),
            _ => GenerateCodeFor_SystemTextJson(enumToProcess),
        };
        context.AddSource($"{enumToProcess.EnumSymbol.ToDisplayString()}_JsonArrayConverter_{enumToProcess.ConversionStrategy}.g",
            SourceText.From(code, Encoding.UTF8));
    }
    

    private static string GenerateCodeFor_SystemTextJson(EnumToProcess enumToProcess)
    {
        var builder = new CodeBuilder();
        
        var isVisible = enumToProcess.EnumSymbol.IsVisibleOutsideOfAssembly();
        var methodVisibility = isVisible ? "public" : "internal";

        var enumName = enumToProcess.EnumSymbol.Name;
        var enumFullName = enumToProcess.FullCsharpName;

        builder.Append(Utils.AutoGenerated());

        builder.AppendLineWithIdent("using System.Text.Json;");
        builder.AppendLineWithIdent("using System.Text.Json.Serialization;");
        builder.AppendLine();
        
        using (new NamespaceBlock(builder, enumToProcess.EnumSymbol))
        {
            builder.Append(Utils.GeneratedEnumByAttributeSummary(JsonArrayConverterAttribute.AttributeFullName, enumFullName));
            builder.AppendIdent().Append(methodVisibility).Append(" class ").Append(enumName)
                .Append("ArrayJsonConverter").Append(enumToProcess.ConversionStrategy)
                .Append(" : JsonConverter<").Append(enumFullName).Append("[]>").AppendLine();
            
            using (new BracketsBlock(builder))
            {
                AppendRead();
                builder.AppendLine();
                AppendWrite();
            }
        }

        return builder.ToString();

        void AppendRead()
        {
            builder.AppendIdent().Append("public override ").Append(enumFullName)
                .Append("[] Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)")
                .AppendLine();

            using (new BracketsBlock(builder))
            {
                builder.AppendIdent().Append("var list = new List<").Append(enumFullName).Append(">();").AppendLine();
                builder.AppendLineWithIdent("if (reader.TokenType != JsonTokenType.StartArray)");
                using (new BracketsBlock(builder))
                {
                    builder.AppendLineWithIdent("return list.ToArray();");
                }

                builder.AppendLineWithIdent("while (reader.Read())");
                using (new BracketsBlock(builder))
                {
                    builder.AppendLineWithIdent("if (reader.TokenType == JsonTokenType.EndArray)");
                    using (new BracketsBlock(builder))
                    {
                        builder.AppendLineWithIdent("break;");
                    }

                    builder.AppendIdent().Append("list.Add(").Append(enumName)
                        .Append("Ext.")
                        .Append(enumToProcess.ConversionStrategy switch
                        {
                            "Name" => "FromString",
                            "SnakeCase" => "FromSnakeCaseString",
                            "Value" => "FromStringValue",
                            _ => "",
                        })
                        .Append("(reader.GetString() ?? \"\"));")
                        .AppendLine();
                }

                builder.AppendLineWithIdent("return list.ToArray();");
            }
        }
        
        void AppendWrite()
        {
            builder.AppendIdent().Append("public override void Write(Utf8JsonWriter writer, ")
                .Append(enumFullName).Append("[] values, JsonSerializerOptions options)").AppendLine();

            using (new BracketsBlock(builder))
            {
                builder.AppendLineWithIdent("writer.WriteStartArray();");

                builder.AppendLineWithIdent("foreach (var value in values)");
                using (new BracketsBlock(builder))
                {
                    builder.AppendIdent().Append("writer.WriteStringValue(")
                        .Append(enumToProcess.ConversionStrategy switch
                        {
                            "Name" => "value.Name()",
                            "SnakeCase" => "value.SnakeCaseName()",
                            "Value" => "value.Value().ToString()",
                            _ => "",
                        })
                        .Append(");")
                        .AppendLine();
                }

                builder.AppendLineWithIdent("writer.WriteEndArray();");
            }
        }
    }
    
    private static string GenerateCodeFor_NewtonsoftJson(EnumToProcess enumToProcess)
    {
        var builder = new CodeBuilder();
        
        var enumName = enumToProcess.EnumSymbol.Name;
        var isVisible = enumToProcess.EnumSymbol.IsVisibleOutsideOfAssembly();
        var methodVisibility = isVisible ? "public" : "internal";
        
        builder.Append(Utils.AutoGenerated());

        builder.AppendLineWithIdent("using System;");
        builder.AppendLineWithIdent("using System.Collections.Generic;");
        builder.AppendLineWithIdent("using Newtonsoft.Json;");
        builder.AppendLineWithIdent("using Newtonsoft.Json.Linq;");
        builder.AppendLine();
        
        using (new NamespaceBlock(builder, enumToProcess.EnumSymbol))
        {
            builder.Append(Utils.GeneratedEnumByAttributeSummary(JsonArrayConverterAttribute.AttributeFullName, enumToProcess.FullCsharpName));
            builder.AppendIdent().Append(methodVisibility).Append(" class ").Append(enumName)
                .Append("ArrayJsonConverter").Append(enumToProcess.ConversionStrategy)
                .Append(" : JsonConverter").AppendLine();;
            
            using (new BracketsBlock(builder))
            {
                AppendCanConvert();
                builder.AppendLine();
                AppendRead();
                builder.AppendLine();
                AppendWrite();
            }
        }

        return builder.ToString();

        void AppendCanConvert()
        {
            builder.AppendIdent().Append("public override bool CanConvert(Type objectType) => objectType == typeof(")
                .Append(enumName).Append("[]) || objectType == typeof(List<")
                .Append(enumName).Append(">);").AppendLine();
        }

        void AppendRead()
        {
            builder.AppendLineWithIdent(
                "public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)");

            using (new BracketsBlock(builder))
            {
                builder.AppendLineWithIdent("if (reader.TokenType == JsonToken.Null)");
                using (new BracketsBlock(builder))
                {
                    builder.AppendLineWithIdent("return null;");
                }

                builder.AppendIdent().Append("var result = new List<").Append(enumName).Append(">();").AppendLine();
                builder.AppendLineWithIdent("var array = JArray.Load(reader);");
                
                builder.AppendLine();
                builder.AppendLineWithIdent("foreach (var item in array)");
                using (new BracketsBlock(builder))
                {
                    builder.AppendLineWithIdent("if (item.Type == JTokenType.String)");
                    using (new BracketsBlock(builder))
                    {
                        builder.AppendIdent().Append("result.Add(").Append(enumName)
                            .Append(enumToProcess.ConversionStrategy switch
                            {
                                "Name" => "Ext.FromString(item.ToString()));",
                                "SnakeCase" => "Ext.FromSnakeCaseString(item.ToString()));",
                                "Value" => "Ext.FromStringValue(item.ToString()));",
                                _ => "",
                            })
                            .AppendLine();
                    }
                    builder.AppendLineWithIdent("else");
                    using (new BracketsBlock(builder))
                    {
                        builder.AppendIdent()
                            .Append("throw new JsonSerializationException($\"Invalid value for enum {nameof(")
                            .Append(enumName).Append(")}: {item}\");").AppendLine();
                    }
                }

                builder.AppendIdent().Append("return objectType == typeof(").Append(enumName)
                    .Append("[]) ? result.ToArray() : result;").AppendLine();
            }
        }
        
        void AppendWrite()
        {
            builder.AppendLineWithIdent(
                "public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)");

            using (new BracketsBlock(builder))
            {
                builder.AppendIdent().Append("if (value is IEnumerable<").Append(enumName).Append("> enumArray)")
                    .AppendLine();

                using (new BracketsBlock(builder))
                {
                    builder.AppendLineWithIdent("writer.WriteStartArray();");
                    builder.AppendLineWithIdent("foreach (var enumValue in enumArray)");
                    using (new BracketsBlock(builder))
                    {
                        builder.AppendIdent().Append("writer.WriteValue(enumValue.")
                            .Append(enumToProcess.ConversionStrategy switch
                            {
                                "Name" => "Name()",
                                "SnakeCase" => "SnakeCaseName()",
                                "Value" => "Value()",
                                _ => "",
                            })
                            .Append(");").AppendLine();;
                    }
                    builder.AppendLineWithIdent("writer.WriteEndArray();");
                }
                builder.AppendLineWithIdent("else");
                using (new BracketsBlock(builder))
                {
                    builder.AppendLineWithIdent("writer.WriteNull();");
                }
            }
        }
    }
}