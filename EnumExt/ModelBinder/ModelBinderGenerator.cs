using System.Collections.Generic;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using SourceGeneration.Utils.CodeAnalysisExtensions;
using SourceGeneration.Utils.CodeBuilder;
using SourceGeneration.Utils.Common;

namespace EnumExt.ModelBinder;

[Generator]
public sealed class ModelBinderGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var enums = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (node, _) => IsSyntaxTargetForGeneration(node),
                transform: static (syntaxContext, token) => GetSemanticTargetForGeneration(syntaxContext, token))
            .SelectMany(static (array, _) => array)
            .Collect()
            .SelectMany(static (array, _) => array);

        context.RegisterPostInitializationOutput(i => i.AddSource(
            $"{ModelBinderAttribute.AttributeFullName}.g", ModelBinderAttribute.AttributeText));
        
        context.RegisterSourceOutput(enums, GenerateCode);
    }

    private static bool IsSyntaxTargetForGeneration(SyntaxNode node)
    {
        return node is EnumDeclarationSyntax;
    }
    
    private static List<EnumToProcess> GetSemanticTargetForGeneration(GeneratorSyntaxContext ctx,
        CancellationToken token)
    {
        var enumDeclarationSyntax = (EnumDeclarationSyntax) ctx.Node;

        var enumDeclarationSymbol = ctx.SemanticModel.GetDeclaredSymbol(enumDeclarationSyntax, token);
        if (enumDeclarationSymbol is not ITypeSymbol enumDeclarationTypeSymbol)
        {
            return [];
        }

        var enumNamespace = enumDeclarationTypeSymbol.GetNamespace();

        if (!enumDeclarationSyntax.HaveAttribute(ModelBinderAttribute.AttributeName))
        {
            return [];
        }
        
        var list = new List<EnumToProcess>
        {
            new EnumToProcess(enumDeclarationTypeSymbol, enumNamespace)
        };

        return list;
    }

    private static void GenerateCode(SourceProductionContext context, EnumToProcess enumToProcess)
    {
        var code = GenerateCode(enumToProcess);
        context.AddSource($"{enumToProcess.EnumSymbol.ToDisplayString()}_ModelBinder.g",
            SourceText.From(code, Encoding.UTF8));
        
        var attributeCode = GenerateAttributeCode(enumToProcess);
        context.AddSource($"{enumToProcess.EnumSymbol.ToDisplayString()}_ModelBinderAttribute.g",
            SourceText.From(attributeCode, Encoding.UTF8));
    }

    private static string GenerateCode(EnumToProcess enumToProcess)
    {
        var builder = new CodeBuilder();
        
        var isVisible = enumToProcess.EnumSymbol.IsVisibleOutsideOfAssembly();
        var methodVisibility = isVisible ? "public" : "internal";
        var enumName = enumToProcess.EnumSymbol.Name;
        var enumFullName = enumToProcess.FullCsharpName;
        
        builder.Append(Utils.AutoGenerated());
        
        builder.AppendLineWithIdent("using Microsoft.AspNetCore.Mvc.ModelBinding;");
        builder.AppendLineWithIdent("using Microsoft.EntityFrameworkCore.Storage.ValueConversion;");
        builder.AppendLine();
        
        using (new NamespaceBlock(builder, enumToProcess.EnumSymbol))
        {
            builder.Append(Utils.GeneratedEnumByAttributeSummary(ModelBinderAttribute.AttributeFullName, enumFullName));
            builder.AppendIdent().Append(methodVisibility).Append(" class ").Append(enumName)
                .Append("ModelBinder : IModelBinder").AppendLine();

            using (new BracketsBlock(builder))
            {
                builder.AppendLineWithIdent("public Task BindModelAsync(ModelBindingContext bindingContext)");
                using (new BracketsBlock(builder))
                {
                    builder.AppendLineWithIdent("if (bindingContext == null)");
                    using (new BracketsBlock(builder))
                    {
                        builder.AppendLineWithIdent("throw new ArgumentNullException(nameof(bindingContext));");
                    }

                    builder.AppendLine();
                    builder.AppendLineWithIdent("var valueProviderResult = bindingContext.ValueProvider.GetValue(bindingContext.ModelName);");

                    builder.AppendLineWithIdent("if (valueProviderResult == ValueProviderResult.None)");
                    using (new BracketsBlock(builder))
                    {
                        builder.AppendLineWithIdent("return Task.CompletedTask;");
                    }

                    builder.AppendLine();
                    builder.AppendLineWithIdent(
                        "bindingContext.ModelState.SetModelValue(bindingContext.ModelName, valueProviderResult);");
                    builder.AppendLineWithIdent("var value = valueProviderResult.FirstValue;");
                    
                    builder.AppendLineWithIdent("if (string.IsNullOrEmpty(value))");
                    using (new BracketsBlock(builder))
                    {
                        builder.AppendLineWithIdent("return Task.CompletedTask;");
                    }
                    
                    builder.AppendLine();
                    builder.AppendIdent().Append("if (System.Enum.TryParse(typeof(").Append(enumName)
                        .Append("), value, true, out var result))").AppendLine();
                    using (new BracketsBlock(builder))
                    {
                        builder.AppendLineWithIdent("bindingContext.Result = ModelBindingResult.Success(result);");
                    }
                    builder.AppendLineWithIdent("else");
                    using (new BracketsBlock(builder))
                    {
                        builder.AppendIdent()
                            .Append("bindingContext.ModelState.TryAddModelError(bindingContext.ModelName, $\"Value '{value}' is not valid for enum type {nameof(")
                            .Append(enumName).Append(")}.\");").AppendLine();
                    }
                    
                    builder.AppendLine();
                    builder.AppendLineWithIdent("return Task.CompletedTask;");
                }
            }
        }

        return builder.ToString();
    }
    
    private static string GenerateAttributeCode(EnumToProcess enumToProcess)
    {
        var builder = new CodeBuilder();
        
        var isVisible = enumToProcess.EnumSymbol.IsVisibleOutsideOfAssembly();
        var methodVisibility = isVisible ? "public" : "internal";
        var enumName = enumToProcess.EnumSymbol.Name;
        
        builder.Append(Utils.AutoGenerated());

        builder.AppendLineWithIdent("using Microsoft.AspNetCore.Mvc;");
        builder.AppendLine();
        
        using (new NamespaceBlock(builder, enumToProcess.EnumSymbol))
        {
            builder.Append(Utils.GeneratedEnumByAttributeSummary(ModelBinderAttribute.AttributeFullName, enumToProcess.FullCsharpName));
            builder.AppendIdent().Append(methodVisibility).Append(" class ").Append(enumName)
                .Append("ModelBinderAttribute : ModelBinderAttribute").AppendLine();

            using (new BracketsBlock(builder))
            {
                builder.AppendIdent().Append("public ").Append(enumName).Append("ModelBinderAttribute()").AppendLine();
                using (new BracketsBlock(builder))
                {
                    builder.AppendIdent().Append("BinderType = typeof(").Append(enumName).Append("ModelBinder);").AppendLine();
                }
            }
        }

        return builder.ToString();
    }
}