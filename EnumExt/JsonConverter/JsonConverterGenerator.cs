using System.Collections.Generic;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using SourceGeneration.Utils.CodeAnalysisExtensions;
using SourceGeneration.Utils.CodeBuilder;
using SourceGeneration.Utils.Common;

namespace EnumExt.JsonConverter;

[Generator]
public sealed class JsonConverterGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var enums = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (node, _) => IsSyntaxTargetForGeneration(node),
                transform: static (syntaxContext, token) => GetSemanticTargetForGeneration(syntaxContext, token))
            .SelectMany(static (array, _) => array)
            .Collect()
            .SelectMany(static (array, _) => array);

        context.RegisterPostInitializationOutput(i =>
        {
            i.AddSource("JsonConverterType.g", GenerateJsonConverterType());
            i.AddSource($"{JsonConverterAttribute.AttributeFullName}.g", JsonConverterAttribute.AttributeText);
        });
        
        context.RegisterSourceOutput(enums, GenerateCode);
    }

    private static bool IsSyntaxTargetForGeneration(SyntaxNode node)
    {
        return node is EnumDeclarationSyntax;
    }
    
    private static List<EnumToProcess> GetSemanticTargetForGeneration(GeneratorSyntaxContext ctx,
        CancellationToken token)
    {
        var enumDeclarationSyntax = (EnumDeclarationSyntax) ctx.Node;

        var enumDeclarationSymbol = ctx.SemanticModel.GetDeclaredSymbol(enumDeclarationSyntax, token);
        if (enumDeclarationSymbol is not ITypeSymbol enumDeclarationTypeSymbol)
        {
            return [];
        }

        var enumNamespace = enumDeclarationTypeSymbol.GetNamespace();

        if (!enumDeclarationSyntax.HaveAttributeWithArguments(JsonConverterAttribute.AttributeName, out var argumentList))
        {
            return [];
        }

        if (argumentList.Arguments.Count < 1)
        {
            return [];
        }
        
        var jsonTypeArgument = argumentList.Arguments[0];
        if (jsonTypeArgument.Expression is not MemberAccessExpressionSyntax jsonTypeSyntax)
        {
            return [];
        }

        var jsonType = jsonTypeSyntax.Name.Identifier.Text;
        var list = new List<EnumToProcess>
        {
            new EnumToProcess(enumDeclarationTypeSymbol, enumNamespace, jsonType),
        };

        return list;
    }

    private static void GenerateCode(SourceProductionContext context, EnumToProcess enumToProcess)
    {
        var code = enumToProcess.JsonType switch
        {
            "SystemTextJson" => GenerateCodeFor_SystemTextJson(enumToProcess),
            "NewtonsoftJson" => GenerateCodeFor_NewtonsoftJson(enumToProcess),
            _ => GenerateCodeFor_SystemTextJson(enumToProcess),
        };
        context.AddSource($"{enumToProcess.EnumSymbol.ToDisplayString()}_JsonConverter.g",
            SourceText.From(code, Encoding.UTF8));
    }

    private string GenerateJsonConverterType()
    {
        var builder = new CodeBuilder();
        
        builder.AppendLine("/// <auto-generated />").AppendLine();
        
        builder.AppendLineWithIdent("public enum JsonConverterType");
        using (new BracketsBlock(builder))
        {
            builder.AppendLineWithIdent("SystemTextJson,");
            builder.AppendLineWithIdent("NewtonsoftJson,");
        }

        return builder.ToString();
    }

    private static string GenerateCodeFor_SystemTextJson(EnumToProcess enumToProcess)
    {
        var builder = new CodeBuilder();
        
        var isVisible = enumToProcess.EnumSymbol.IsVisibleOutsideOfAssembly();
        var methodVisibility = isVisible ? "public" : "internal";
        
        builder.Append(Utils.AutoGenerated());

        builder.AppendLineWithIdent("using System.Text.Json;");
        builder.AppendLineWithIdent("using System.Text.Json.Serialization;");
        builder.AppendLine();
        
        using (new NamespaceBlock(builder, enumToProcess.EnumSymbol))
        {
            builder.Append(Utils.GeneratedEnumByAttributeSummary(JsonConverterAttribute.AttributeFullName, enumToProcess.FullCsharpName));
            builder.AppendIdent().Append(methodVisibility).Append(" class ").Append(enumToProcess.EnumSymbol.Name)
                .Append("JsonConverter : JsonConverter<").Append(enumToProcess.FullCsharpName).Append(">");
            
            using (new BracketsBlock(builder))
            {
                AppendRead();
                builder.AppendLine();
                AppendWrite();
            }
        }

        return builder.ToString();

        void AppendRead()
        {
            builder.AppendIdent().Append("public override ").Append(enumToProcess.FullCsharpName)
                .Append(" Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)")
                .AppendLine();

            using (new BracketsBlock(builder))
            {
                builder.AppendIdent().Append("return ").Append(enumToProcess.EnumSymbol.Name)
                    .Append("Ext.FromString(reader.GetString() ?? \"\");").AppendLine();
            }
        }
        
        void AppendWrite()
        {
            builder.AppendIdent().Append("public override void Write(Utf8JsonWriter writer, ")
                .Append(enumToProcess.FullCsharpName).Append(" value, JsonSerializerOptions options)").AppendLine();

            using (new BracketsBlock(builder))
            {
                builder.AppendLineWithIdent("writer.WriteStringValue(value.Name());");
            }
        }
    }
    
    private static string GenerateCodeFor_NewtonsoftJson(EnumToProcess enumToProcess)
    {
        var builder = new CodeBuilder();
        
        var isVisible = enumToProcess.EnumSymbol.IsVisibleOutsideOfAssembly();
        var methodVisibility = isVisible ? "public" : "internal";
        
        builder.Append(Utils.AutoGenerated());

        builder.AppendLineWithIdent("using System;");
        builder.AppendLineWithIdent("using Newtonsoft.Json;");
        builder.AppendLine();
        
        using (new NamespaceBlock(builder, enumToProcess.EnumSymbol))
        {
            builder.Append(Utils.GeneratedEnumByAttributeSummary(JsonConverterAttribute.AttributeFullName, enumToProcess.FullCsharpName));
            builder.AppendIdent().Append(methodVisibility).Append(" class ").Append(enumToProcess.EnumSymbol.Name)
                .AppendLine("JsonConverter : JsonConverter");
            
            using (new BracketsBlock(builder))
            {
                AppendCanConvert();
                builder.AppendLine();
                AppendRead();
                builder.AppendLine();
                AppendWrite();
            }
        }

        return builder.ToString();

        void AppendCanConvert()
        {
            builder.AppendIdent().Append("public override bool CanConvert(Type objectType) => objectType == typeof(")
                .Append(enumToProcess.EnumSymbol.Name).Append(");").AppendLine();
        }

        void AppendRead()
        {
            builder.AppendLineWithIdent(
                "public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)");

            using (new BracketsBlock(builder))
            {
                builder.AppendLineWithIdent("var stringValue = reader.ReadAsString();");
                builder.AppendLineWithIdent("if (stringValue is null)");
                using (new BracketsBlock(builder))
                {
                    builder.AppendLineWithIdent("return null;");
                }

                builder.AppendIdent().Append("return ").Append(enumToProcess.EnumSymbol.Name)
                    .Append("Ext.FromString(stringValue);").AppendLine();
            }
        }
        
        void AppendWrite()
        {
            builder.AppendLineWithIdent(
                "public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)");

            using (new BracketsBlock(builder))
            {
                builder.AppendIdent().Append("if (value is ").Append(enumToProcess.FullCsharpName).Append(" enumValue)")
                    .AppendLine();

                using (new BracketsBlock(builder))
                {
                    builder.AppendLineWithIdent("writer.WriteValue(enumValue.Name());");
                }

                builder.AppendLineWithIdent("else");
                using (new BracketsBlock(builder))
                {
                    builder.AppendLineWithIdent("writer.WriteNull();");
                }
            }
        }
    }
}