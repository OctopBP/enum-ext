using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using UnityAttributes.Common;

namespace UnityAttributes.GenConstructor; 

[Generator]
public partial class GenConstructorGenerator : ISourceGenerator {
  static readonly string generatedCodeAttribute = typeof(GenConstructorGenerator).generatedCodeAttribute();

  public void Initialize(GeneratorInitializationContext context) {
    context.RegisterForPostInitialization(i => i.AddSource($"{AttributeName}.g.cs", attributeText));
    context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
  }

  public void Execute(GeneratorExecutionContext context) {
    if (context.SyntaxContextReceiver is not SyntaxReceiver receiver)
      return;

    foreach (var (classSymbol, fieldsSymbols) in receiver.classes) {
      var classSource = processClass(classSymbol, fieldsSymbols);
      context.AddSource($"{classSymbol}.constructor.g.cs", SourceText.From(classSource, Encoding.UTF8));
    }
  }

  static string processClass(INamedTypeSymbol classSymbol, IFieldSymbol[] fieldsSymbols) {
    var codeBuilder = new CodeBuilder();

    codeBuilder.append(Const.AutoGeneratedText);
    codeBuilder.appendEmptyLine();
    codeBuilder.appendEmptyLine();
    
    if (!classSymbol.ContainingNamespace.IsGlobalNamespace) {
      codeBuilder.appendLine(
        text: $"namespace {string.Join(".", classSymbol.ContainingNamespace.ConstituentNamespaces)} {{",
        identChange: CodeBuilder.IdentChange.IncreaseAfter
      );
    }

    var containingTypes = new List<INamedTypeSymbol>();
    var containingType = classSymbol.ContainingType;
    var indentCount = 0;
    while (containingType != null) {
      containingTypes.Add(containingType);
      containingType = containingType.ContainingType;
      indentCount++;
    }

    containingTypes.Reverse();
    foreach (var type in containingTypes) {
      codeBuilder.appendLine($"public partial class {type.Name} {{", CodeBuilder.IdentChange.IncreaseAfter);
    }
    
    codeBuilder.appendLine($"public partial class {classSymbol.Name} {{", CodeBuilder.IdentChange.IncreaseAfter);

    var fieldsParam = string.Join(", ", fieldsSymbols.Select(f => $"{f.Type} {f.Name}"));

    codeBuilder.appendLine($"public {classSymbol.Name}({fieldsParam}) {{", CodeBuilder.IdentChange.IncreaseAfter);
    foreach (var fieldSymbol in fieldsSymbols) {
      processField(codeBuilder, fieldSymbol);
    }
    codeBuilder.appendLine("}", CodeBuilder.IdentChange.DecreaseBefore);
    
    for (var j = 0; j < indentCount; j++) {
      codeBuilder.appendLine("}", CodeBuilder.IdentChange.DecreaseBefore);
    }
    
    if (!classSymbol.ContainingNamespace.IsGlobalNamespace) {
      codeBuilder.appendLine("}", CodeBuilder.IdentChange.DecreaseBefore);
    }
    codeBuilder.appendLine("}", CodeBuilder.IdentChange.DecreaseBefore);
    
    return codeBuilder.getResult();
    
    static void processField(CodeBuilder codeBuilder, IFieldSymbol fieldSymbol) {
      var fieldName = fieldSymbol.Name;
      codeBuilder.appendLine($"this.{fieldName} = {fieldName};");
    }
  }
}

internal class SyntaxReceiver : ISyntaxContextReceiver {
  public List<(INamedTypeSymbol classSymbol, IFieldSymbol[] fieldsSymbols)> classes { get; } = new();

  public void OnVisitSyntaxNode(GeneratorSyntaxContext context) {
    if (context.Node is not ClassDeclarationSyntax { AttributeLists.Count: > 0 } classDeclarationSyntax) return;

    var classSymbol = Unsafe.As<INamedTypeSymbol>(
      context.SemanticModel.GetDeclaredSymbol(classDeclarationSyntax)
    );
    
    var haveAttribute =
      classSymbol != null
      && classSymbol.GetAttributes().Any(ad =>
        ad.AttributeClass != null
        && ad.AttributeClass.ToDisplayString() == GenConstructorGenerator.AttributeName
      );
    
    if (haveAttribute) {
      var fields = classDeclarationSyntax
        .ChildNodes()
        .OfType<FieldDeclarationSyntax>()
        // .Where(field => field.Modifiers.Any(SyntaxKind.PublicKeyword))
        // .Where(field => field.Modifiers.Any(SyntaxKind.ReadOnlyKeyword))
        .SelectMany(field => field.Declaration.Variables)
        .Select(variable => Unsafe.As<IFieldSymbol>(context.SemanticModel.GetDeclaredSymbol(variable)))
        .ToArray();
      
      classes.Add((classSymbol, fields));
    }
  }
}