#nullable enable
using System.Collections.Generic;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using UnityAttributes.Common;

namespace UnityAttributes.PublicAccessor;

[Generator]
public sealed class PublicAccessorGenerator : IIncrementalGenerator
{
    private const string ATTRIBUTE_SHORT_NAME = "PublicAccessor";
    
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var enums = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (node, _) => IsSyntaxTargetForGeneration(node),
                transform: static (syntaxContext, token) => GetSemanticTargetForGeneration(syntaxContext, token))
            .Where(static m => m is not null)
            .Collect()
            .SelectMany(static (array, _) => array);

        context.RegisterPostInitializationOutput(i => i.AddSource(
            $"{PublicAccessorAttribute.ATTRIBUTE_FULL_NAME}.g", PublicAccessorAttribute.ATTRIBUTE_TEXT));
        
        context.RegisterSourceOutput(enums, GenerateCode!);
    }

    private static bool IsSyntaxTargetForGeneration(SyntaxNode node)
    {
        return node is not ClassDeclarationSyntax;
    }
        
    private static ClassToProcess? GetSemanticTargetForGeneration(GeneratorSyntaxContext ctx, CancellationToken token)
    {
        var classDeclarationSyntax = (ClassDeclarationSyntax) ctx.Node;
        var classDeclarationSymbol = ctx.SemanticModel.GetDeclaredSymbol(classDeclarationSyntax, token);
        if (classDeclarationSymbol is not ITypeSymbol classTypeSymbol)
        {
            return null;
        }
        
        var fieldToProcess = new List<FieldToProcess>();
        foreach (var classMemberDeclarationSyntax in classDeclarationSyntax.Members)
        {
            if (!classMemberDeclarationSyntax.HaveAttribute(ATTRIBUTE_SHORT_NAME))
            {
                continue;
            }

            if (classMemberDeclarationSyntax is not FieldDeclarationSyntax fieldDeclarationSyntax)
            {
                continue;
            }
            
            foreach (var variable in fieldDeclarationSyntax.Declaration.Variables)
            {
                if (ctx.SemanticModel.GetDeclaredSymbol(variable) is IFieldSymbol fieldSymbol)
                {
                    fieldToProcess.Add(new FieldToProcess(fieldSymbol));
                }
            }
        }
            
        return new ClassToProcess(classTypeSymbol, fieldToProcess, classDeclarationSymbol.GetNamespace());
    }

    private static void GenerateCode(SourceProductionContext context, ClassToProcess classToProcess)
    {
        var code = GenerateCode(classToProcess);
        context.AddSource($"{classToProcess.FullCsharpName}.g", SourceText.From(code, Encoding.UTF8));
    }

    private static string GenerateCode(ClassToProcess classToProcess)
    {
        var builder = new CodeBuilder();
        
        var isVisible = classToProcess.FieldSymbol.IsVisibleOutsideOfAssembly();
        var methodVisibility = isVisible ? "public" : "internal";
        
        builder.AppendLine("/// <auto-generated />").AppendLine();
        
        if (!string.IsNullOrEmpty(classToProcess.FullNamespace))
        {
            builder.Append("namespace ").Append(classToProcess.FullNamespace!).AppendLine();
            builder.OpenBrackets();
        }

        builder.AppendIdent().Append(methodVisibility).Append(" partial class ").Append(classToProcess.FieldSymbol.Name);
        builder.OpenBrackets();
        
        foreach (var field in classToProcess.Fields)
        {
            var fieldName = field.FieldSymbol.Name;
            var fieldType = field.FieldSymbol.Type;

            builder.AppendLine();
            builder.AppendLineWithIdent($"/// Public accessor for <see cref=\"{fieldName}\"/>");
            builder.AppendLineWithIdent($"/// <inheritdoc cref=\"{fieldName}\"/>");
            builder.AppendIdent().Append("public ").Append(fieldType.ToString()).Append(" ").Append(fieldName.UpperFirstCharOrAddUnderline()).Append(" => ").Append(fieldName).AppendLine(";");
        }
        
        builder.CloseBrackets();

        if (!string.IsNullOrEmpty(classToProcess.FullNamespace))
        {
            builder.CloseBrackets();
        }

        return builder.ToString();
    }
}